
STM_Product_Development_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010424  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000594  00000000  00000000  00010467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001d5  00000000  00000000  000109fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00010bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005d  00000000  00000000  00010c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dd26  00000000  00000000  00010cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c01  00000000  00000000  0001e9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004f7b5  00000000  00000000  0001f5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000158  00000000  00000000  0006ed9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0006eef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003d4 	.word	0x080003d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003d4 	.word	0x080003d4

080001d8 <InitGpioOutputPort>:
#include "gpioDriver.h"

/// ---------------- OUTPUT DRIVERS FUNCTIONS BEGIN -----------------------

void InitGpioOutputPort(uint8_t gpioPortEn, uint16_t fPin, uint16_t sPin)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	460b      	mov	r3, r1
 80001e4:	80bb      	strh	r3, [r7, #4]
 80001e6:	4613      	mov	r3, r2
 80001e8:	807b      	strh	r3, [r7, #2]
	RCC->AHB1ENR |= gpioPortEn;		/// Set the bit for port A enable
 80001ea:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <InitGpioOutputPort+0x48>)
 80001ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	490b      	ldr	r1, [pc, #44]	; (8000220 <InitGpioOutputPort+0x48>)
 80001f2:	4313      	orrs	r3, r2
 80001f4:	630b      	str	r3, [r1, #48]	; 0x30
	GPIOA->MODER |= fPin;			/// set a bit
 80001f6:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <InitGpioOutputPort+0x4c>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	88bb      	ldrh	r3, [r7, #4]
 80001fc:	4909      	ldr	r1, [pc, #36]	; (8000224 <InitGpioOutputPort+0x4c>)
 80001fe:	4313      	orrs	r3, r2
 8000200:	600b      	str	r3, [r1, #0]
	GPIOA->MODER &=~ sPin;			/// clear a bit
 8000202:	4b08      	ldr	r3, [pc, #32]	; (8000224 <InitGpioOutputPort+0x4c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	887a      	ldrh	r2, [r7, #2]
 8000208:	43d2      	mvns	r2, r2
 800020a:	4611      	mov	r1, r2
 800020c:	4a05      	ldr	r2, [pc, #20]	; (8000224 <InitGpioOutputPort+0x4c>)
 800020e:	400b      	ands	r3, r1
 8000210:	6013      	str	r3, [r2, #0]
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40023800 	.word	0x40023800
 8000224:	40020000 	.word	0x40020000

08000228 <GpioOutputHigh>:
	GPIOA->ODR &=~ pin;
	for(int i=0; i<delay; i++){}
}

void GpioOutputHigh(uint8_t pin)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= pin;
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <GpioOutputHigh+0x24>)
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4904      	ldr	r1, [pc, #16]	; (800024c <GpioOutputHigh+0x24>)
 800023a:	4313      	orrs	r3, r2
 800023c:	614b      	str	r3, [r1, #20]
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40020000 	.word	0x40020000

08000250 <GpioOutputLow>:

void GpioOutputLow(uint8_t pin)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &=~ pin;
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <GpioOutputLow+0x28>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	79fa      	ldrb	r2, [r7, #7]
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <GpioOutputLow+0x28>)
 8000266:	400b      	ands	r3, r1
 8000268:	6153      	str	r3, [r2, #20]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40020000 	.word	0x40020000

0800027c <InitGpioInputPort>:
/// ---------------- OUTPUT DRIVERS FUNCTIONS END -----------------------


void InitGpioInputPort(uint8_t gpioPortEn, uint8_t fPin, uint8_t sPin)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
 8000286:	460b      	mov	r3, r1
 8000288:	71bb      	strb	r3, [r7, #6]
 800028a:	4613      	mov	r3, r2
 800028c:	717b      	strb	r3, [r7, #5]
	RCC->AHB1ENR |= gpioPortEn;		/// Set the bit for port A enable
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <InitGpioInputPort+0x4c>)
 8000290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	490c      	ldr	r1, [pc, #48]	; (80002c8 <InitGpioInputPort+0x4c>)
 8000296:	4313      	orrs	r3, r2
 8000298:	630b      	str	r3, [r1, #48]	; 0x30
	GPIOC->MODER &=~fPin;
 800029a:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <InitGpioInputPort+0x50>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79ba      	ldrb	r2, [r7, #6]
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	4611      	mov	r1, r2
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <InitGpioInputPort+0x50>)
 80002a6:	400b      	ands	r3, r1
 80002a8:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~sPin;
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <InitGpioInputPort+0x50>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	797a      	ldrb	r2, [r7, #5]
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a05      	ldr	r2, [pc, #20]	; (80002cc <InitGpioInputPort+0x50>)
 80002b6:	400b      	ands	r3, r1
 80002b8:	6013      	str	r3, [r2, #0]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020800 	.word	0x40020800

080002d0 <GpioInputHigh>:

uint8_t GpioInputHigh(uint16_t inpPin)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	80fb      	strh	r3, [r7, #6]
	/*Check if BTN is pressed*/
	if(GPIOC->IDR & inpPin)
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <GpioInputHigh+0x28>)
 80002dc:	691a      	ldr	r2, [r3, #16]
 80002de:	88fb      	ldrh	r3, [r7, #6]
 80002e0:	4013      	ands	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <GpioInputHigh+0x1a>
	{
		return 1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e000      	b.n	80002ec <GpioInputHigh+0x1c>
	}
	else{
		return 0;
 80002ea:	2300      	movs	r3, #0
	}
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40020800 	.word	0x40020800

080002fc <main>:
#define 		BTN_PIN			PIN13
/// ----------------- GPIO INPUT DRIVER DEFINE END --------------------


int main()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	InitGpioOutputPort(GPIOAEN, OUTPUT_F_PIN, OUTPUT_S_PIN); 	/// Output Init
 8000300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff65 	bl	80001d8 <InitGpioOutputPort>
	InitGpioInputPort(GPIOCEN, INPUT_F_PIN, INPUT_S_PIN);		/// Input Init
 800030e:	2200      	movs	r2, #0
 8000310:	2100      	movs	r1, #0
 8000312:	2004      	movs	r0, #4
 8000314:	f7ff ffb2 	bl	800027c <InitGpioInputPort>
	while(1)
	{
		if(GpioInputHigh(BTN_PIN))
 8000318:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800031c:	f7ff ffd8 	bl	80002d0 <GpioInputHigh>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d003      	beq.n	800032e <main+0x32>
		{
			GpioOutputHigh(LED_PIN);
 8000326:	2020      	movs	r0, #32
 8000328:	f7ff ff7e 	bl	8000228 <GpioOutputHigh>
 800032c:	e7f4      	b.n	8000318 <main+0x1c>
		}
		else
		{
			GpioOutputLow(LED_PIN);
 800032e:	2020      	movs	r0, #32
 8000330:	f7ff ff8e 	bl	8000250 <GpioOutputLow>
		if(GpioInputHigh(BTN_PIN))
 8000334:	e7f0      	b.n	8000318 <main+0x1c>
	...

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ffc7 	bl	80002fc <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	2000001c 	.word	0x2000001c

08000388 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	4d0d      	ldr	r5, [pc, #52]	; (80003c4 <__libc_init_array+0x38>)
 8000390:	4c0d      	ldr	r4, [pc, #52]	; (80003c8 <__libc_init_array+0x3c>)
 8000392:	1b64      	subs	r4, r4, r5
 8000394:	10a4      	asrs	r4, r4, #2
 8000396:	2600      	movs	r6, #0
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	4d0b      	ldr	r5, [pc, #44]	; (80003cc <__libc_init_array+0x40>)
 800039e:	4c0c      	ldr	r4, [pc, #48]	; (80003d0 <__libc_init_array+0x44>)
 80003a0:	f000 f818 	bl	80003d4 <_init>
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	10a4      	asrs	r4, r4, #2
 80003a8:	2600      	movs	r6, #0
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
