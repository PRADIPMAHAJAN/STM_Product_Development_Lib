
STM_Product_Development_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000e84  08000e84  00010e84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000eb8  08000eb8  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08000eb8  08000eb8  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eb8  08000eb8  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eb8  08000eb8  00010eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ebc  08000ebc  00010ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08000ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000050  08000f10  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08000f10  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000080b  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d2  00000000  00000000  000208ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00020ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000090  00000000  00000000  00020d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000011ef  00000000  00000000  00020df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001553  00000000  00000000  00021fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000537bb  00000000  00000000  0002353a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000074c  00000000  00000000  00076cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00077444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000e6c 	.word	0x08000e6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08000e6c 	.word	0x08000e6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <uart2RXInit>:
	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
}

void uart2RXInit(uint32_t uartBaudrate)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8000288:	4b32      	ldr	r3, [pc, #200]	; (8000354 <uart2RXInit+0xd4>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028c:	4a31      	ldr	r2, [pc, #196]	; (8000354 <uart2RXInit+0xd4>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000294:	4b30      	ldr	r3, [pc, #192]	; (8000358 <uart2RXInit+0xd8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a2f      	ldr	r2, [pc, #188]	; (8000358 <uart2RXInit+0xd8>)
 800029a:	f023 0310 	bic.w	r3, r3, #16
 800029e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002a0:	4b2d      	ldr	r3, [pc, #180]	; (8000358 <uart2RXInit+0xd8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a2c      	ldr	r2, [pc, #176]	; (8000358 <uart2RXInit+0xd8>)
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 80002ac:	4b2a      	ldr	r3, [pc, #168]	; (8000358 <uart2RXInit+0xd8>)
 80002ae:	6a1b      	ldr	r3, [r3, #32]
 80002b0:	4a29      	ldr	r2, [pc, #164]	; (8000358 <uart2RXInit+0xd8>)
 80002b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80002b8:	4b27      	ldr	r3, [pc, #156]	; (8000358 <uart2RXInit+0xd8>)
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	4a26      	ldr	r2, [pc, #152]	; (8000358 <uart2RXInit+0xd8>)
 80002be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <uart2RXInit+0xd8>)
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	4a23      	ldr	r2, [pc, #140]	; (8000358 <uart2RXInit+0xd8>)
 80002ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <uart2RXInit+0xd8>)
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	4a20      	ldr	r2, [pc, #128]	; (8000358 <uart2RXInit+0xd8>)
 80002d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002da:	6213      	str	r3, [r2, #32]


	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <uart2RXInit+0xd8>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <uart2RXInit+0xd8>)
 80002e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <uart2RXInit+0xd8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <uart2RXInit+0xd8>)
 80002ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002f2:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |= (1U<<12);
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <uart2RXInit+0xd8>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <uart2RXInit+0xd8>)
 80002fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <uart2RXInit+0xd8>)
 8000302:	6a1b      	ldr	r3, [r3, #32]
 8000304:	4a14      	ldr	r2, [pc, #80]	; (8000358 <uart2RXInit+0xd8>)
 8000306:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800030a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <uart2RXInit+0xd8>)
 800030e:	6a1b      	ldr	r3, [r3, #32]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <uart2RXInit+0xd8>)
 8000312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000316:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <uart2RXInit+0xd8>)
 800031a:	6a1b      	ldr	r3, [r3, #32]
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <uart2RXInit+0xd8>)
 800031e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000322:	6213      	str	r3, [r2, #32]

	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 8000324:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <uart2RXInit+0xd4>)
 8000326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000328:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <uart2RXInit+0xd4>)
 800032a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800032e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,uartBaudrate);
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	490a      	ldr	r1, [pc, #40]	; (800035c <uart2RXInit+0xdc>)
 8000334:	480a      	ldr	r0, [pc, #40]	; (8000360 <uart2RXInit+0xe0>)
 8000336:	f000 f84f 	bl	80003d8 <uart_set_baudrate>

	/*Configure the transfer direction*/
	 USART2->CR1 =  (CR1_TE | CR1_RE);
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <uart2RXInit+0xe0>)
 800033c:	220c      	movs	r2, #12
 800033e:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <uart2RXInit+0xe0>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4a06      	ldr	r2, [pc, #24]	; (8000360 <uart2RXInit+0xe0>)
 8000346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034a:	60d3      	str	r3, [r2, #12]
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40023800 	.word	0x40023800
 8000358:	40020000 	.word	0x40020000
 800035c:	00f42400 	.word	0x00f42400
 8000360:	40004400 	.word	0x40004400

08000364 <Uart2ReadString>:

	/*Read data*/
	return USART2->DR;
}

char *Uart2ReadString(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
    char *sentence = (char *)malloc(RX_BUFFER * sizeof(char));
 800036a:	2080      	movs	r0, #128	; 0x80
 800036c:	f000 f8d2 	bl	8000514 <malloc>
 8000370:	4603      	mov	r3, r0
 8000372:	60bb      	str	r3, [r7, #8]
    if (sentence == NULL) {
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d101      	bne.n	800037e <Uart2ReadString+0x1a>
        // Handle memory allocation error
        return NULL;
 800037a:	2300      	movs	r3, #0
 800037c:	e025      	b.n	80003ca <Uart2ReadString+0x66>
    }
    int index = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]

    while (1) {
        // Make sure the receive data register is not empty
        while (!(USART2->SR & SR_RXNE)) {}
 8000382:	bf00      	nop
 8000384:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <Uart2ReadString+0x70>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0f9      	beq.n	8000384 <Uart2ReadString+0x20>

        // Read data
        char received_char = USART2->DR;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <Uart2ReadString+0x70>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	71fb      	strb	r3, [r7, #7]

        // Check if the received character is a newline or carriage return
        if (received_char == '\n' || received_char == '\r') {
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2b0a      	cmp	r3, #10
 800039a:	d002      	beq.n	80003a2 <Uart2ReadString+0x3e>
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	2b0d      	cmp	r3, #13
 80003a0:	d105      	bne.n	80003ae <Uart2ReadString+0x4a>
            sentence[index] = '\0'; // Null-terminate the string
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	68ba      	ldr	r2, [r7, #8]
 80003a6:	4413      	add	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
            break; // Exit the loop, end of sentence reached
 80003ac:	e00c      	b.n	80003c8 <Uart2ReadString+0x64>
        }

        // Add the character to the sentence
        sentence[index] = received_char;
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	68ba      	ldr	r2, [r7, #8]
 80003b2:	4413      	add	r3, r2
 80003b4:	79fa      	ldrb	r2, [r7, #7]
 80003b6:	701a      	strb	r2, [r3, #0]

        // Move to the next position in the sentence
        index++;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	3301      	adds	r3, #1
 80003bc:	60fb      	str	r3, [r7, #12]

        // Check if the sentence exceeds maximum length
        if (index >= RX_BUFFER - 1) {
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	2b7e      	cmp	r3, #126	; 0x7e
 80003c2:	dc00      	bgt.n	80003c6 <Uart2ReadString+0x62>
    while (1) {
 80003c4:	e7dd      	b.n	8000382 <Uart2ReadString+0x1e>
            // Handle error: sentence too long
            break;
 80003c6:	bf00      	nop
        }
    }
    return sentence;
 80003c8:	68bb      	ldr	r3, [r7, #8]
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40004400 	.word	0x40004400

080003d8 <uart_set_baudrate>:
        str++;
    }
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 80003e4:	6879      	ldr	r1, [r7, #4]
 80003e6:	68b8      	ldr	r0, [r7, #8]
 80003e8:	f000 f808 	bl	80003fc <compute_uart_bd>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	609a      	str	r2, [r3, #8]
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	085a      	lsrs	r2, r3, #1
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	441a      	add	r2, r3
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	fbb2 f3f3 	udiv	r3, r2, r3
 8000414:	b29b      	uxth	r3, r3
}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <main>:
/// -------------- UART Configuration End ---------------------------

char readBuff[RX_BUFFER] = {0};									/// Read buffer for read data from rx line

int main()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
	//  InitGpioOutputPort(GPIOAEN, OUTPUT_F_PIN, OUTPUT_S_PIN); 	/// Output Initialize
	//  InitGpioInputPort(GPIOCEN, INPUT_F_PIN, INPUT_S_PIN);		/// Input  Initialize

	// Uart2TXInit(UART_BAUDRATE);									/// UART2 Initialization
	uart2RXInit(UART_BAUDRATE);									/// 
 800042a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800042e:	f7ff ff27 	bl	8000280 <uart2RXInit>
		// else{
		// 	GpioOutputLow(LED_PIN);
		// }	

	/// ------------------ Read String and sentance -------------------
		char *received_sentence = Uart2ReadString();
 8000432:	f7ff ff97 	bl	8000364 <Uart2ReadString>
 8000436:	6078      	str	r0, [r7, #4]
		if (received_sentence != NULL) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f9      	beq.n	8000432 <main+0xe>
    	sprintf(readBuff, received_sentence);
 800043e:	6879      	ldr	r1, [r7, #4]
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <main+0x2c>)
 8000442:	f000 f923 	bl	800068c <siprintf>
    	free(received_sentence); // Free the dynamically allocated memory
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f000 f86c 	bl	8000524 <free>
	{
 800044c:	e7f1      	b.n	8000432 <main+0xe>
 800044e:	bf00      	nop
 8000450:	2000006c 	.word	0x2000006c

08000454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800045c:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <_sbrk+0x5c>)
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <_sbrk+0x60>)
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000468:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <_sbrk+0x64>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d102      	bne.n	8000476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <_sbrk+0x64>)
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <_sbrk+0x68>)
 8000474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <_sbrk+0x64>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	693a      	ldr	r2, [r7, #16]
 8000480:	429a      	cmp	r2, r3
 8000482:	d207      	bcs.n	8000494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000484:	f000 f932 	bl	80006ec <__errno>
 8000488:	4603      	mov	r3, r0
 800048a:	220c      	movs	r2, #12
 800048c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	e009      	b.n	80004a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <_sbrk+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800049a:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <_sbrk+0x64>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <_sbrk+0x64>)
 80004a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004a6:	68fb      	ldr	r3, [r7, #12]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20020000 	.word	0x20020000
 80004b4:	00000400 	.word	0x00000400
 80004b8:	200000ec 	.word	0x200000ec
 80004bc:	20000238 	.word	0x20000238

080004c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <LoopForever+0x6>)
  ldr r1, =_edata
 80004ca:	490d      	ldr	r1, [pc, #52]	; (8000500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <LoopForever+0xe>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <LoopForever+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ee:	f000 f903 	bl	80006f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f2:	f7ff ff97 	bl	8000424 <main>

080004f6 <LoopForever>:

LoopForever:
  b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
  ldr   r0, =_estack
 80004f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000504:	08000ec0 	.word	0x08000ec0
  ldr r2, =_sbss
 8000508:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800050c:	20000238 	.word	0x20000238

08000510 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC_IRQHandler>
	...

08000514 <malloc>:
 8000514:	4b02      	ldr	r3, [pc, #8]	; (8000520 <malloc+0xc>)
 8000516:	4601      	mov	r1, r0
 8000518:	6818      	ldr	r0, [r3, #0]
 800051a:	f000 b82b 	b.w	8000574 <_malloc_r>
 800051e:	bf00      	nop
 8000520:	2000004c 	.word	0x2000004c

08000524 <free>:
 8000524:	4b02      	ldr	r3, [pc, #8]	; (8000530 <free+0xc>)
 8000526:	4601      	mov	r1, r0
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	f000 b90b 	b.w	8000744 <_free_r>
 800052e:	bf00      	nop
 8000530:	2000004c 	.word	0x2000004c

08000534 <sbrk_aligned>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	4e0e      	ldr	r6, [pc, #56]	; (8000570 <sbrk_aligned+0x3c>)
 8000538:	460c      	mov	r4, r1
 800053a:	6831      	ldr	r1, [r6, #0]
 800053c:	4605      	mov	r5, r0
 800053e:	b911      	cbnz	r1, 8000546 <sbrk_aligned+0x12>
 8000540:	f000 f8c4 	bl	80006cc <_sbrk_r>
 8000544:	6030      	str	r0, [r6, #0]
 8000546:	4621      	mov	r1, r4
 8000548:	4628      	mov	r0, r5
 800054a:	f000 f8bf 	bl	80006cc <_sbrk_r>
 800054e:	1c43      	adds	r3, r0, #1
 8000550:	d00a      	beq.n	8000568 <sbrk_aligned+0x34>
 8000552:	1cc4      	adds	r4, r0, #3
 8000554:	f024 0403 	bic.w	r4, r4, #3
 8000558:	42a0      	cmp	r0, r4
 800055a:	d007      	beq.n	800056c <sbrk_aligned+0x38>
 800055c:	1a21      	subs	r1, r4, r0
 800055e:	4628      	mov	r0, r5
 8000560:	f000 f8b4 	bl	80006cc <_sbrk_r>
 8000564:	3001      	adds	r0, #1
 8000566:	d101      	bne.n	800056c <sbrk_aligned+0x38>
 8000568:	f04f 34ff 	mov.w	r4, #4294967295
 800056c:	4620      	mov	r0, r4
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	200000f4 	.word	0x200000f4

08000574 <_malloc_r>:
 8000574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000578:	1ccd      	adds	r5, r1, #3
 800057a:	f025 0503 	bic.w	r5, r5, #3
 800057e:	3508      	adds	r5, #8
 8000580:	2d0c      	cmp	r5, #12
 8000582:	bf38      	it	cc
 8000584:	250c      	movcc	r5, #12
 8000586:	2d00      	cmp	r5, #0
 8000588:	4607      	mov	r7, r0
 800058a:	db01      	blt.n	8000590 <_malloc_r+0x1c>
 800058c:	42a9      	cmp	r1, r5
 800058e:	d905      	bls.n	800059c <_malloc_r+0x28>
 8000590:	230c      	movs	r3, #12
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	2600      	movs	r6, #0
 8000596:	4630      	mov	r0, r6
 8000598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800059c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000670 <_malloc_r+0xfc>
 80005a0:	f000 f868 	bl	8000674 <__malloc_lock>
 80005a4:	f8d8 3000 	ldr.w	r3, [r8]
 80005a8:	461c      	mov	r4, r3
 80005aa:	bb5c      	cbnz	r4, 8000604 <_malloc_r+0x90>
 80005ac:	4629      	mov	r1, r5
 80005ae:	4638      	mov	r0, r7
 80005b0:	f7ff ffc0 	bl	8000534 <sbrk_aligned>
 80005b4:	1c43      	adds	r3, r0, #1
 80005b6:	4604      	mov	r4, r0
 80005b8:	d155      	bne.n	8000666 <_malloc_r+0xf2>
 80005ba:	f8d8 4000 	ldr.w	r4, [r8]
 80005be:	4626      	mov	r6, r4
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d145      	bne.n	8000650 <_malloc_r+0xdc>
 80005c4:	2c00      	cmp	r4, #0
 80005c6:	d048      	beq.n	800065a <_malloc_r+0xe6>
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	4631      	mov	r1, r6
 80005cc:	4638      	mov	r0, r7
 80005ce:	eb04 0903 	add.w	r9, r4, r3
 80005d2:	f000 f87b 	bl	80006cc <_sbrk_r>
 80005d6:	4581      	cmp	r9, r0
 80005d8:	d13f      	bne.n	800065a <_malloc_r+0xe6>
 80005da:	6821      	ldr	r1, [r4, #0]
 80005dc:	1a6d      	subs	r5, r5, r1
 80005de:	4629      	mov	r1, r5
 80005e0:	4638      	mov	r0, r7
 80005e2:	f7ff ffa7 	bl	8000534 <sbrk_aligned>
 80005e6:	3001      	adds	r0, #1
 80005e8:	d037      	beq.n	800065a <_malloc_r+0xe6>
 80005ea:	6823      	ldr	r3, [r4, #0]
 80005ec:	442b      	add	r3, r5
 80005ee:	6023      	str	r3, [r4, #0]
 80005f0:	f8d8 3000 	ldr.w	r3, [r8]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d038      	beq.n	800066a <_malloc_r+0xf6>
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	42a2      	cmp	r2, r4
 80005fc:	d12b      	bne.n	8000656 <_malloc_r+0xe2>
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	e00f      	b.n	8000624 <_malloc_r+0xb0>
 8000604:	6822      	ldr	r2, [r4, #0]
 8000606:	1b52      	subs	r2, r2, r5
 8000608:	d41f      	bmi.n	800064a <_malloc_r+0xd6>
 800060a:	2a0b      	cmp	r2, #11
 800060c:	d917      	bls.n	800063e <_malloc_r+0xca>
 800060e:	1961      	adds	r1, r4, r5
 8000610:	42a3      	cmp	r3, r4
 8000612:	6025      	str	r5, [r4, #0]
 8000614:	bf18      	it	ne
 8000616:	6059      	strne	r1, [r3, #4]
 8000618:	6863      	ldr	r3, [r4, #4]
 800061a:	bf08      	it	eq
 800061c:	f8c8 1000 	streq.w	r1, [r8]
 8000620:	5162      	str	r2, [r4, r5]
 8000622:	604b      	str	r3, [r1, #4]
 8000624:	4638      	mov	r0, r7
 8000626:	f104 060b 	add.w	r6, r4, #11
 800062a:	f000 f829 	bl	8000680 <__malloc_unlock>
 800062e:	f026 0607 	bic.w	r6, r6, #7
 8000632:	1d23      	adds	r3, r4, #4
 8000634:	1af2      	subs	r2, r6, r3
 8000636:	d0ae      	beq.n	8000596 <_malloc_r+0x22>
 8000638:	1b9b      	subs	r3, r3, r6
 800063a:	50a3      	str	r3, [r4, r2]
 800063c:	e7ab      	b.n	8000596 <_malloc_r+0x22>
 800063e:	42a3      	cmp	r3, r4
 8000640:	6862      	ldr	r2, [r4, #4]
 8000642:	d1dd      	bne.n	8000600 <_malloc_r+0x8c>
 8000644:	f8c8 2000 	str.w	r2, [r8]
 8000648:	e7ec      	b.n	8000624 <_malloc_r+0xb0>
 800064a:	4623      	mov	r3, r4
 800064c:	6864      	ldr	r4, [r4, #4]
 800064e:	e7ac      	b.n	80005aa <_malloc_r+0x36>
 8000650:	4634      	mov	r4, r6
 8000652:	6876      	ldr	r6, [r6, #4]
 8000654:	e7b4      	b.n	80005c0 <_malloc_r+0x4c>
 8000656:	4613      	mov	r3, r2
 8000658:	e7cc      	b.n	80005f4 <_malloc_r+0x80>
 800065a:	230c      	movs	r3, #12
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	4638      	mov	r0, r7
 8000660:	f000 f80e 	bl	8000680 <__malloc_unlock>
 8000664:	e797      	b.n	8000596 <_malloc_r+0x22>
 8000666:	6025      	str	r5, [r4, #0]
 8000668:	e7dc      	b.n	8000624 <_malloc_r+0xb0>
 800066a:	605b      	str	r3, [r3, #4]
 800066c:	deff      	udf	#255	; 0xff
 800066e:	bf00      	nop
 8000670:	200000f0 	.word	0x200000f0

08000674 <__malloc_lock>:
 8000674:	4801      	ldr	r0, [pc, #4]	; (800067c <__malloc_lock+0x8>)
 8000676:	f000 b863 	b.w	8000740 <__retarget_lock_acquire_recursive>
 800067a:	bf00      	nop
 800067c:	20000234 	.word	0x20000234

08000680 <__malloc_unlock>:
 8000680:	4801      	ldr	r0, [pc, #4]	; (8000688 <__malloc_unlock+0x8>)
 8000682:	f000 b85e 	b.w	8000742 <__retarget_lock_release_recursive>
 8000686:	bf00      	nop
 8000688:	20000234 	.word	0x20000234

0800068c <siprintf>:
 800068c:	b40e      	push	{r1, r2, r3}
 800068e:	b500      	push	{lr}
 8000690:	b09c      	sub	sp, #112	; 0x70
 8000692:	ab1d      	add	r3, sp, #116	; 0x74
 8000694:	9002      	str	r0, [sp, #8]
 8000696:	9006      	str	r0, [sp, #24]
 8000698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <siprintf+0x38>)
 800069e:	9107      	str	r1, [sp, #28]
 80006a0:	9104      	str	r1, [sp, #16]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <siprintf+0x3c>)
 80006a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80006a8:	9105      	str	r1, [sp, #20]
 80006aa:	6800      	ldr	r0, [r0, #0]
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	a902      	add	r1, sp, #8
 80006b0:	f000 f8ee 	bl	8000890 <_svfiprintf_r>
 80006b4:	9b02      	ldr	r3, [sp, #8]
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	b01c      	add	sp, #112	; 0x70
 80006bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80006c0:	b003      	add	sp, #12
 80006c2:	4770      	bx	lr
 80006c4:	2000004c 	.word	0x2000004c
 80006c8:	ffff0208 	.word	0xffff0208

080006cc <_sbrk_r>:
 80006cc:	b538      	push	{r3, r4, r5, lr}
 80006ce:	4d06      	ldr	r5, [pc, #24]	; (80006e8 <_sbrk_r+0x1c>)
 80006d0:	2300      	movs	r3, #0
 80006d2:	4604      	mov	r4, r0
 80006d4:	4608      	mov	r0, r1
 80006d6:	602b      	str	r3, [r5, #0]
 80006d8:	f7ff febc 	bl	8000454 <_sbrk>
 80006dc:	1c43      	adds	r3, r0, #1
 80006de:	d102      	bne.n	80006e6 <_sbrk_r+0x1a>
 80006e0:	682b      	ldr	r3, [r5, #0]
 80006e2:	b103      	cbz	r3, 80006e6 <_sbrk_r+0x1a>
 80006e4:	6023      	str	r3, [r4, #0]
 80006e6:	bd38      	pop	{r3, r4, r5, pc}
 80006e8:	20000230 	.word	0x20000230

080006ec <__errno>:
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <__errno+0x8>)
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2000004c 	.word	0x2000004c

080006f8 <__libc_init_array>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	4d0d      	ldr	r5, [pc, #52]	; (8000730 <__libc_init_array+0x38>)
 80006fc:	4c0d      	ldr	r4, [pc, #52]	; (8000734 <__libc_init_array+0x3c>)
 80006fe:	1b64      	subs	r4, r4, r5
 8000700:	10a4      	asrs	r4, r4, #2
 8000702:	2600      	movs	r6, #0
 8000704:	42a6      	cmp	r6, r4
 8000706:	d109      	bne.n	800071c <__libc_init_array+0x24>
 8000708:	4d0b      	ldr	r5, [pc, #44]	; (8000738 <__libc_init_array+0x40>)
 800070a:	4c0c      	ldr	r4, [pc, #48]	; (800073c <__libc_init_array+0x44>)
 800070c:	f000 fbae 	bl	8000e6c <_init>
 8000710:	1b64      	subs	r4, r4, r5
 8000712:	10a4      	asrs	r4, r4, #2
 8000714:	2600      	movs	r6, #0
 8000716:	42a6      	cmp	r6, r4
 8000718:	d105      	bne.n	8000726 <__libc_init_array+0x2e>
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000720:	4798      	blx	r3
 8000722:	3601      	adds	r6, #1
 8000724:	e7ee      	b.n	8000704 <__libc_init_array+0xc>
 8000726:	f855 3b04 	ldr.w	r3, [r5], #4
 800072a:	4798      	blx	r3
 800072c:	3601      	adds	r6, #1
 800072e:	e7f2      	b.n	8000716 <__libc_init_array+0x1e>
 8000730:	08000eb8 	.word	0x08000eb8
 8000734:	08000eb8 	.word	0x08000eb8
 8000738:	08000eb8 	.word	0x08000eb8
 800073c:	08000ebc 	.word	0x08000ebc

08000740 <__retarget_lock_acquire_recursive>:
 8000740:	4770      	bx	lr

08000742 <__retarget_lock_release_recursive>:
 8000742:	4770      	bx	lr

08000744 <_free_r>:
 8000744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000746:	2900      	cmp	r1, #0
 8000748:	d044      	beq.n	80007d4 <_free_r+0x90>
 800074a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800074e:	9001      	str	r0, [sp, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	f1a1 0404 	sub.w	r4, r1, #4
 8000756:	bfb8      	it	lt
 8000758:	18e4      	addlt	r4, r4, r3
 800075a:	f7ff ff8b 	bl	8000674 <__malloc_lock>
 800075e:	4a1e      	ldr	r2, [pc, #120]	; (80007d8 <_free_r+0x94>)
 8000760:	9801      	ldr	r0, [sp, #4]
 8000762:	6813      	ldr	r3, [r2, #0]
 8000764:	b933      	cbnz	r3, 8000774 <_free_r+0x30>
 8000766:	6063      	str	r3, [r4, #4]
 8000768:	6014      	str	r4, [r2, #0]
 800076a:	b003      	add	sp, #12
 800076c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000770:	f7ff bf86 	b.w	8000680 <__malloc_unlock>
 8000774:	42a3      	cmp	r3, r4
 8000776:	d908      	bls.n	800078a <_free_r+0x46>
 8000778:	6825      	ldr	r5, [r4, #0]
 800077a:	1961      	adds	r1, r4, r5
 800077c:	428b      	cmp	r3, r1
 800077e:	bf01      	itttt	eq
 8000780:	6819      	ldreq	r1, [r3, #0]
 8000782:	685b      	ldreq	r3, [r3, #4]
 8000784:	1949      	addeq	r1, r1, r5
 8000786:	6021      	streq	r1, [r4, #0]
 8000788:	e7ed      	b.n	8000766 <_free_r+0x22>
 800078a:	461a      	mov	r2, r3
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	b10b      	cbz	r3, 8000794 <_free_r+0x50>
 8000790:	42a3      	cmp	r3, r4
 8000792:	d9fa      	bls.n	800078a <_free_r+0x46>
 8000794:	6811      	ldr	r1, [r2, #0]
 8000796:	1855      	adds	r5, r2, r1
 8000798:	42a5      	cmp	r5, r4
 800079a:	d10b      	bne.n	80007b4 <_free_r+0x70>
 800079c:	6824      	ldr	r4, [r4, #0]
 800079e:	4421      	add	r1, r4
 80007a0:	1854      	adds	r4, r2, r1
 80007a2:	42a3      	cmp	r3, r4
 80007a4:	6011      	str	r1, [r2, #0]
 80007a6:	d1e0      	bne.n	800076a <_free_r+0x26>
 80007a8:	681c      	ldr	r4, [r3, #0]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	6053      	str	r3, [r2, #4]
 80007ae:	440c      	add	r4, r1
 80007b0:	6014      	str	r4, [r2, #0]
 80007b2:	e7da      	b.n	800076a <_free_r+0x26>
 80007b4:	d902      	bls.n	80007bc <_free_r+0x78>
 80007b6:	230c      	movs	r3, #12
 80007b8:	6003      	str	r3, [r0, #0]
 80007ba:	e7d6      	b.n	800076a <_free_r+0x26>
 80007bc:	6825      	ldr	r5, [r4, #0]
 80007be:	1961      	adds	r1, r4, r5
 80007c0:	428b      	cmp	r3, r1
 80007c2:	bf04      	itt	eq
 80007c4:	6819      	ldreq	r1, [r3, #0]
 80007c6:	685b      	ldreq	r3, [r3, #4]
 80007c8:	6063      	str	r3, [r4, #4]
 80007ca:	bf04      	itt	eq
 80007cc:	1949      	addeq	r1, r1, r5
 80007ce:	6021      	streq	r1, [r4, #0]
 80007d0:	6054      	str	r4, [r2, #4]
 80007d2:	e7ca      	b.n	800076a <_free_r+0x26>
 80007d4:	b003      	add	sp, #12
 80007d6:	bd30      	pop	{r4, r5, pc}
 80007d8:	200000f0 	.word	0x200000f0

080007dc <__ssputs_r>:
 80007dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e0:	688e      	ldr	r6, [r1, #8]
 80007e2:	461f      	mov	r7, r3
 80007e4:	42be      	cmp	r6, r7
 80007e6:	680b      	ldr	r3, [r1, #0]
 80007e8:	4682      	mov	sl, r0
 80007ea:	460c      	mov	r4, r1
 80007ec:	4690      	mov	r8, r2
 80007ee:	d82c      	bhi.n	800084a <__ssputs_r+0x6e>
 80007f0:	898a      	ldrh	r2, [r1, #12]
 80007f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80007f6:	d026      	beq.n	8000846 <__ssputs_r+0x6a>
 80007f8:	6965      	ldr	r5, [r4, #20]
 80007fa:	6909      	ldr	r1, [r1, #16]
 80007fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000800:	eba3 0901 	sub.w	r9, r3, r1
 8000804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000808:	1c7b      	adds	r3, r7, #1
 800080a:	444b      	add	r3, r9
 800080c:	106d      	asrs	r5, r5, #1
 800080e:	429d      	cmp	r5, r3
 8000810:	bf38      	it	cc
 8000812:	461d      	movcc	r5, r3
 8000814:	0553      	lsls	r3, r2, #21
 8000816:	d527      	bpl.n	8000868 <__ssputs_r+0x8c>
 8000818:	4629      	mov	r1, r5
 800081a:	f7ff feab 	bl	8000574 <_malloc_r>
 800081e:	4606      	mov	r6, r0
 8000820:	b360      	cbz	r0, 800087c <__ssputs_r+0xa0>
 8000822:	6921      	ldr	r1, [r4, #16]
 8000824:	464a      	mov	r2, r9
 8000826:	f000 fadb 	bl	8000de0 <memcpy>
 800082a:	89a3      	ldrh	r3, [r4, #12]
 800082c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	81a3      	strh	r3, [r4, #12]
 8000836:	6126      	str	r6, [r4, #16]
 8000838:	6165      	str	r5, [r4, #20]
 800083a:	444e      	add	r6, r9
 800083c:	eba5 0509 	sub.w	r5, r5, r9
 8000840:	6026      	str	r6, [r4, #0]
 8000842:	60a5      	str	r5, [r4, #8]
 8000844:	463e      	mov	r6, r7
 8000846:	42be      	cmp	r6, r7
 8000848:	d900      	bls.n	800084c <__ssputs_r+0x70>
 800084a:	463e      	mov	r6, r7
 800084c:	6820      	ldr	r0, [r4, #0]
 800084e:	4632      	mov	r2, r6
 8000850:	4641      	mov	r1, r8
 8000852:	f000 faab 	bl	8000dac <memmove>
 8000856:	68a3      	ldr	r3, [r4, #8]
 8000858:	1b9b      	subs	r3, r3, r6
 800085a:	60a3      	str	r3, [r4, #8]
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	4433      	add	r3, r6
 8000860:	6023      	str	r3, [r4, #0]
 8000862:	2000      	movs	r0, #0
 8000864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000868:	462a      	mov	r2, r5
 800086a:	f000 fac7 	bl	8000dfc <_realloc_r>
 800086e:	4606      	mov	r6, r0
 8000870:	2800      	cmp	r0, #0
 8000872:	d1e0      	bne.n	8000836 <__ssputs_r+0x5a>
 8000874:	6921      	ldr	r1, [r4, #16]
 8000876:	4650      	mov	r0, sl
 8000878:	f7ff ff64 	bl	8000744 <_free_r>
 800087c:	230c      	movs	r3, #12
 800087e:	f8ca 3000 	str.w	r3, [sl]
 8000882:	89a3      	ldrh	r3, [r4, #12]
 8000884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000888:	81a3      	strh	r3, [r4, #12]
 800088a:	f04f 30ff 	mov.w	r0, #4294967295
 800088e:	e7e9      	b.n	8000864 <__ssputs_r+0x88>

08000890 <_svfiprintf_r>:
 8000890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000894:	4698      	mov	r8, r3
 8000896:	898b      	ldrh	r3, [r1, #12]
 8000898:	061b      	lsls	r3, r3, #24
 800089a:	b09d      	sub	sp, #116	; 0x74
 800089c:	4607      	mov	r7, r0
 800089e:	460d      	mov	r5, r1
 80008a0:	4614      	mov	r4, r2
 80008a2:	d50e      	bpl.n	80008c2 <_svfiprintf_r+0x32>
 80008a4:	690b      	ldr	r3, [r1, #16]
 80008a6:	b963      	cbnz	r3, 80008c2 <_svfiprintf_r+0x32>
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	f7ff fe63 	bl	8000574 <_malloc_r>
 80008ae:	6028      	str	r0, [r5, #0]
 80008b0:	6128      	str	r0, [r5, #16]
 80008b2:	b920      	cbnz	r0, 80008be <_svfiprintf_r+0x2e>
 80008b4:	230c      	movs	r3, #12
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	e0d0      	b.n	8000a60 <_svfiprintf_r+0x1d0>
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	616b      	str	r3, [r5, #20]
 80008c2:	2300      	movs	r3, #0
 80008c4:	9309      	str	r3, [sp, #36]	; 0x24
 80008c6:	2320      	movs	r3, #32
 80008c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80008cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80008d0:	2330      	movs	r3, #48	; 0x30
 80008d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000a78 <_svfiprintf_r+0x1e8>
 80008d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80008da:	f04f 0901 	mov.w	r9, #1
 80008de:	4623      	mov	r3, r4
 80008e0:	469a      	mov	sl, r3
 80008e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80008e6:	b10a      	cbz	r2, 80008ec <_svfiprintf_r+0x5c>
 80008e8:	2a25      	cmp	r2, #37	; 0x25
 80008ea:	d1f9      	bne.n	80008e0 <_svfiprintf_r+0x50>
 80008ec:	ebba 0b04 	subs.w	fp, sl, r4
 80008f0:	d00b      	beq.n	800090a <_svfiprintf_r+0x7a>
 80008f2:	465b      	mov	r3, fp
 80008f4:	4622      	mov	r2, r4
 80008f6:	4629      	mov	r1, r5
 80008f8:	4638      	mov	r0, r7
 80008fa:	f7ff ff6f 	bl	80007dc <__ssputs_r>
 80008fe:	3001      	adds	r0, #1
 8000900:	f000 80a9 	beq.w	8000a56 <_svfiprintf_r+0x1c6>
 8000904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000906:	445a      	add	r2, fp
 8000908:	9209      	str	r2, [sp, #36]	; 0x24
 800090a:	f89a 3000 	ldrb.w	r3, [sl]
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 80a1 	beq.w	8000a56 <_svfiprintf_r+0x1c6>
 8000914:	2300      	movs	r3, #0
 8000916:	f04f 32ff 	mov.w	r2, #4294967295
 800091a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800091e:	f10a 0a01 	add.w	sl, sl, #1
 8000922:	9304      	str	r3, [sp, #16]
 8000924:	9307      	str	r3, [sp, #28]
 8000926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800092a:	931a      	str	r3, [sp, #104]	; 0x68
 800092c:	4654      	mov	r4, sl
 800092e:	2205      	movs	r2, #5
 8000930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000934:	4850      	ldr	r0, [pc, #320]	; (8000a78 <_svfiprintf_r+0x1e8>)
 8000936:	f7ff fc53 	bl	80001e0 <memchr>
 800093a:	9a04      	ldr	r2, [sp, #16]
 800093c:	b9d8      	cbnz	r0, 8000976 <_svfiprintf_r+0xe6>
 800093e:	06d0      	lsls	r0, r2, #27
 8000940:	bf44      	itt	mi
 8000942:	2320      	movmi	r3, #32
 8000944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000948:	0711      	lsls	r1, r2, #28
 800094a:	bf44      	itt	mi
 800094c:	232b      	movmi	r3, #43	; 0x2b
 800094e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000952:	f89a 3000 	ldrb.w	r3, [sl]
 8000956:	2b2a      	cmp	r3, #42	; 0x2a
 8000958:	d015      	beq.n	8000986 <_svfiprintf_r+0xf6>
 800095a:	9a07      	ldr	r2, [sp, #28]
 800095c:	4654      	mov	r4, sl
 800095e:	2000      	movs	r0, #0
 8000960:	f04f 0c0a 	mov.w	ip, #10
 8000964:	4621      	mov	r1, r4
 8000966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800096a:	3b30      	subs	r3, #48	; 0x30
 800096c:	2b09      	cmp	r3, #9
 800096e:	d94d      	bls.n	8000a0c <_svfiprintf_r+0x17c>
 8000970:	b1b0      	cbz	r0, 80009a0 <_svfiprintf_r+0x110>
 8000972:	9207      	str	r2, [sp, #28]
 8000974:	e014      	b.n	80009a0 <_svfiprintf_r+0x110>
 8000976:	eba0 0308 	sub.w	r3, r0, r8
 800097a:	fa09 f303 	lsl.w	r3, r9, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	9304      	str	r3, [sp, #16]
 8000982:	46a2      	mov	sl, r4
 8000984:	e7d2      	b.n	800092c <_svfiprintf_r+0x9c>
 8000986:	9b03      	ldr	r3, [sp, #12]
 8000988:	1d19      	adds	r1, r3, #4
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	9103      	str	r1, [sp, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	bfbb      	ittet	lt
 8000992:	425b      	neglt	r3, r3
 8000994:	f042 0202 	orrlt.w	r2, r2, #2
 8000998:	9307      	strge	r3, [sp, #28]
 800099a:	9307      	strlt	r3, [sp, #28]
 800099c:	bfb8      	it	lt
 800099e:	9204      	strlt	r2, [sp, #16]
 80009a0:	7823      	ldrb	r3, [r4, #0]
 80009a2:	2b2e      	cmp	r3, #46	; 0x2e
 80009a4:	d10c      	bne.n	80009c0 <_svfiprintf_r+0x130>
 80009a6:	7863      	ldrb	r3, [r4, #1]
 80009a8:	2b2a      	cmp	r3, #42	; 0x2a
 80009aa:	d134      	bne.n	8000a16 <_svfiprintf_r+0x186>
 80009ac:	9b03      	ldr	r3, [sp, #12]
 80009ae:	1d1a      	adds	r2, r3, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	9203      	str	r2, [sp, #12]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bfb8      	it	lt
 80009b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80009bc:	3402      	adds	r4, #2
 80009be:	9305      	str	r3, [sp, #20]
 80009c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000a88 <_svfiprintf_r+0x1f8>
 80009c4:	7821      	ldrb	r1, [r4, #0]
 80009c6:	2203      	movs	r2, #3
 80009c8:	4650      	mov	r0, sl
 80009ca:	f7ff fc09 	bl	80001e0 <memchr>
 80009ce:	b138      	cbz	r0, 80009e0 <_svfiprintf_r+0x150>
 80009d0:	9b04      	ldr	r3, [sp, #16]
 80009d2:	eba0 000a 	sub.w	r0, r0, sl
 80009d6:	2240      	movs	r2, #64	; 0x40
 80009d8:	4082      	lsls	r2, r0
 80009da:	4313      	orrs	r3, r2
 80009dc:	3401      	adds	r4, #1
 80009de:	9304      	str	r3, [sp, #16]
 80009e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009e4:	4825      	ldr	r0, [pc, #148]	; (8000a7c <_svfiprintf_r+0x1ec>)
 80009e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80009ea:	2206      	movs	r2, #6
 80009ec:	f7ff fbf8 	bl	80001e0 <memchr>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d038      	beq.n	8000a66 <_svfiprintf_r+0x1d6>
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <_svfiprintf_r+0x1f0>)
 80009f6:	bb1b      	cbnz	r3, 8000a40 <_svfiprintf_r+0x1b0>
 80009f8:	9b03      	ldr	r3, [sp, #12]
 80009fa:	3307      	adds	r3, #7
 80009fc:	f023 0307 	bic.w	r3, r3, #7
 8000a00:	3308      	adds	r3, #8
 8000a02:	9303      	str	r3, [sp, #12]
 8000a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a06:	4433      	add	r3, r6
 8000a08:	9309      	str	r3, [sp, #36]	; 0x24
 8000a0a:	e768      	b.n	80008de <_svfiprintf_r+0x4e>
 8000a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a10:	460c      	mov	r4, r1
 8000a12:	2001      	movs	r0, #1
 8000a14:	e7a6      	b.n	8000964 <_svfiprintf_r+0xd4>
 8000a16:	2300      	movs	r3, #0
 8000a18:	3401      	adds	r4, #1
 8000a1a:	9305      	str	r3, [sp, #20]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f04f 0c0a 	mov.w	ip, #10
 8000a22:	4620      	mov	r0, r4
 8000a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a28:	3a30      	subs	r2, #48	; 0x30
 8000a2a:	2a09      	cmp	r2, #9
 8000a2c:	d903      	bls.n	8000a36 <_svfiprintf_r+0x1a6>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0c6      	beq.n	80009c0 <_svfiprintf_r+0x130>
 8000a32:	9105      	str	r1, [sp, #20]
 8000a34:	e7c4      	b.n	80009c0 <_svfiprintf_r+0x130>
 8000a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e7f0      	b.n	8000a22 <_svfiprintf_r+0x192>
 8000a40:	ab03      	add	r3, sp, #12
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	462a      	mov	r2, r5
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <_svfiprintf_r+0x1f4>)
 8000a48:	a904      	add	r1, sp, #16
 8000a4a:	4638      	mov	r0, r7
 8000a4c:	f3af 8000 	nop.w
 8000a50:	1c42      	adds	r2, r0, #1
 8000a52:	4606      	mov	r6, r0
 8000a54:	d1d6      	bne.n	8000a04 <_svfiprintf_r+0x174>
 8000a56:	89ab      	ldrh	r3, [r5, #12]
 8000a58:	065b      	lsls	r3, r3, #25
 8000a5a:	f53f af2d 	bmi.w	80008b8 <_svfiprintf_r+0x28>
 8000a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000a60:	b01d      	add	sp, #116	; 0x74
 8000a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a66:	ab03      	add	r3, sp, #12
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	462a      	mov	r2, r5
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <_svfiprintf_r+0x1f4>)
 8000a6e:	a904      	add	r1, sp, #16
 8000a70:	4638      	mov	r0, r7
 8000a72:	f000 f879 	bl	8000b68 <_printf_i>
 8000a76:	e7eb      	b.n	8000a50 <_svfiprintf_r+0x1c0>
 8000a78:	08000e84 	.word	0x08000e84
 8000a7c:	08000e8e 	.word	0x08000e8e
 8000a80:	00000000 	.word	0x00000000
 8000a84:	080007dd 	.word	0x080007dd
 8000a88:	08000e8a 	.word	0x08000e8a

08000a8c <_printf_common>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	4616      	mov	r6, r2
 8000a92:	4699      	mov	r9, r3
 8000a94:	688a      	ldr	r2, [r1, #8]
 8000a96:	690b      	ldr	r3, [r1, #16]
 8000a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	bfb8      	it	lt
 8000aa0:	4613      	movlt	r3, r2
 8000aa2:	6033      	str	r3, [r6, #0]
 8000aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000aa8:	4607      	mov	r7, r0
 8000aaa:	460c      	mov	r4, r1
 8000aac:	b10a      	cbz	r2, 8000ab2 <_printf_common+0x26>
 8000aae:	3301      	adds	r3, #1
 8000ab0:	6033      	str	r3, [r6, #0]
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	0699      	lsls	r1, r3, #26
 8000ab6:	bf42      	ittt	mi
 8000ab8:	6833      	ldrmi	r3, [r6, #0]
 8000aba:	3302      	addmi	r3, #2
 8000abc:	6033      	strmi	r3, [r6, #0]
 8000abe:	6825      	ldr	r5, [r4, #0]
 8000ac0:	f015 0506 	ands.w	r5, r5, #6
 8000ac4:	d106      	bne.n	8000ad4 <_printf_common+0x48>
 8000ac6:	f104 0a19 	add.w	sl, r4, #25
 8000aca:	68e3      	ldr	r3, [r4, #12]
 8000acc:	6832      	ldr	r2, [r6, #0]
 8000ace:	1a9b      	subs	r3, r3, r2
 8000ad0:	42ab      	cmp	r3, r5
 8000ad2:	dc26      	bgt.n	8000b22 <_printf_common+0x96>
 8000ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ad8:	1e13      	subs	r3, r2, #0
 8000ada:	6822      	ldr	r2, [r4, #0]
 8000adc:	bf18      	it	ne
 8000ade:	2301      	movne	r3, #1
 8000ae0:	0692      	lsls	r2, r2, #26
 8000ae2:	d42b      	bmi.n	8000b3c <_printf_common+0xb0>
 8000ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ae8:	4649      	mov	r1, r9
 8000aea:	4638      	mov	r0, r7
 8000aec:	47c0      	blx	r8
 8000aee:	3001      	adds	r0, #1
 8000af0:	d01e      	beq.n	8000b30 <_printf_common+0xa4>
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	6922      	ldr	r2, [r4, #16]
 8000af6:	f003 0306 	and.w	r3, r3, #6
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf02      	ittt	eq
 8000afe:	68e5      	ldreq	r5, [r4, #12]
 8000b00:	6833      	ldreq	r3, [r6, #0]
 8000b02:	1aed      	subeq	r5, r5, r3
 8000b04:	68a3      	ldr	r3, [r4, #8]
 8000b06:	bf0c      	ite	eq
 8000b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000b0c:	2500      	movne	r5, #0
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	bfc4      	itt	gt
 8000b12:	1a9b      	subgt	r3, r3, r2
 8000b14:	18ed      	addgt	r5, r5, r3
 8000b16:	2600      	movs	r6, #0
 8000b18:	341a      	adds	r4, #26
 8000b1a:	42b5      	cmp	r5, r6
 8000b1c:	d11a      	bne.n	8000b54 <_printf_common+0xc8>
 8000b1e:	2000      	movs	r0, #0
 8000b20:	e008      	b.n	8000b34 <_printf_common+0xa8>
 8000b22:	2301      	movs	r3, #1
 8000b24:	4652      	mov	r2, sl
 8000b26:	4649      	mov	r1, r9
 8000b28:	4638      	mov	r0, r7
 8000b2a:	47c0      	blx	r8
 8000b2c:	3001      	adds	r0, #1
 8000b2e:	d103      	bne.n	8000b38 <_printf_common+0xac>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	3501      	adds	r5, #1
 8000b3a:	e7c6      	b.n	8000aca <_printf_common+0x3e>
 8000b3c:	18e1      	adds	r1, r4, r3
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	2030      	movs	r0, #48	; 0x30
 8000b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000b46:	4422      	add	r2, r4
 8000b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000b50:	3302      	adds	r3, #2
 8000b52:	e7c7      	b.n	8000ae4 <_printf_common+0x58>
 8000b54:	2301      	movs	r3, #1
 8000b56:	4622      	mov	r2, r4
 8000b58:	4649      	mov	r1, r9
 8000b5a:	4638      	mov	r0, r7
 8000b5c:	47c0      	blx	r8
 8000b5e:	3001      	adds	r0, #1
 8000b60:	d0e6      	beq.n	8000b30 <_printf_common+0xa4>
 8000b62:	3601      	adds	r6, #1
 8000b64:	e7d9      	b.n	8000b1a <_printf_common+0x8e>
	...

08000b68 <_printf_i>:
 8000b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b6c:	7e0f      	ldrb	r7, [r1, #24]
 8000b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000b70:	2f78      	cmp	r7, #120	; 0x78
 8000b72:	4691      	mov	r9, r2
 8000b74:	4680      	mov	r8, r0
 8000b76:	460c      	mov	r4, r1
 8000b78:	469a      	mov	sl, r3
 8000b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000b7e:	d807      	bhi.n	8000b90 <_printf_i+0x28>
 8000b80:	2f62      	cmp	r7, #98	; 0x62
 8000b82:	d80a      	bhi.n	8000b9a <_printf_i+0x32>
 8000b84:	2f00      	cmp	r7, #0
 8000b86:	f000 80d4 	beq.w	8000d32 <_printf_i+0x1ca>
 8000b8a:	2f58      	cmp	r7, #88	; 0x58
 8000b8c:	f000 80c0 	beq.w	8000d10 <_printf_i+0x1a8>
 8000b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000b98:	e03a      	b.n	8000c10 <_printf_i+0xa8>
 8000b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000b9e:	2b15      	cmp	r3, #21
 8000ba0:	d8f6      	bhi.n	8000b90 <_printf_i+0x28>
 8000ba2:	a101      	add	r1, pc, #4	; (adr r1, 8000ba8 <_printf_i+0x40>)
 8000ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ba8:	08000c01 	.word	0x08000c01
 8000bac:	08000c15 	.word	0x08000c15
 8000bb0:	08000b91 	.word	0x08000b91
 8000bb4:	08000b91 	.word	0x08000b91
 8000bb8:	08000b91 	.word	0x08000b91
 8000bbc:	08000b91 	.word	0x08000b91
 8000bc0:	08000c15 	.word	0x08000c15
 8000bc4:	08000b91 	.word	0x08000b91
 8000bc8:	08000b91 	.word	0x08000b91
 8000bcc:	08000b91 	.word	0x08000b91
 8000bd0:	08000b91 	.word	0x08000b91
 8000bd4:	08000d19 	.word	0x08000d19
 8000bd8:	08000c41 	.word	0x08000c41
 8000bdc:	08000cd3 	.word	0x08000cd3
 8000be0:	08000b91 	.word	0x08000b91
 8000be4:	08000b91 	.word	0x08000b91
 8000be8:	08000d3b 	.word	0x08000d3b
 8000bec:	08000b91 	.word	0x08000b91
 8000bf0:	08000c41 	.word	0x08000c41
 8000bf4:	08000b91 	.word	0x08000b91
 8000bf8:	08000b91 	.word	0x08000b91
 8000bfc:	08000cdb 	.word	0x08000cdb
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	1d1a      	adds	r2, r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	602a      	str	r2, [r5, #0]
 8000c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000c10:	2301      	movs	r3, #1
 8000c12:	e09f      	b.n	8000d54 <_printf_i+0x1ec>
 8000c14:	6820      	ldr	r0, [r4, #0]
 8000c16:	682b      	ldr	r3, [r5, #0]
 8000c18:	0607      	lsls	r7, r0, #24
 8000c1a:	f103 0104 	add.w	r1, r3, #4
 8000c1e:	6029      	str	r1, [r5, #0]
 8000c20:	d501      	bpl.n	8000c26 <_printf_i+0xbe>
 8000c22:	681e      	ldr	r6, [r3, #0]
 8000c24:	e003      	b.n	8000c2e <_printf_i+0xc6>
 8000c26:	0646      	lsls	r6, r0, #25
 8000c28:	d5fb      	bpl.n	8000c22 <_printf_i+0xba>
 8000c2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	da03      	bge.n	8000c3a <_printf_i+0xd2>
 8000c32:	232d      	movs	r3, #45	; 0x2d
 8000c34:	4276      	negs	r6, r6
 8000c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000c3a:	485a      	ldr	r0, [pc, #360]	; (8000da4 <_printf_i+0x23c>)
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	e012      	b.n	8000c66 <_printf_i+0xfe>
 8000c40:	682b      	ldr	r3, [r5, #0]
 8000c42:	6820      	ldr	r0, [r4, #0]
 8000c44:	1d19      	adds	r1, r3, #4
 8000c46:	6029      	str	r1, [r5, #0]
 8000c48:	0605      	lsls	r5, r0, #24
 8000c4a:	d501      	bpl.n	8000c50 <_printf_i+0xe8>
 8000c4c:	681e      	ldr	r6, [r3, #0]
 8000c4e:	e002      	b.n	8000c56 <_printf_i+0xee>
 8000c50:	0641      	lsls	r1, r0, #25
 8000c52:	d5fb      	bpl.n	8000c4c <_printf_i+0xe4>
 8000c54:	881e      	ldrh	r6, [r3, #0]
 8000c56:	4853      	ldr	r0, [pc, #332]	; (8000da4 <_printf_i+0x23c>)
 8000c58:	2f6f      	cmp	r7, #111	; 0x6f
 8000c5a:	bf0c      	ite	eq
 8000c5c:	2308      	moveq	r3, #8
 8000c5e:	230a      	movne	r3, #10
 8000c60:	2100      	movs	r1, #0
 8000c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000c66:	6865      	ldr	r5, [r4, #4]
 8000c68:	60a5      	str	r5, [r4, #8]
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	bfa2      	ittt	ge
 8000c6e:	6821      	ldrge	r1, [r4, #0]
 8000c70:	f021 0104 	bicge.w	r1, r1, #4
 8000c74:	6021      	strge	r1, [r4, #0]
 8000c76:	b90e      	cbnz	r6, 8000c7c <_printf_i+0x114>
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	d04b      	beq.n	8000d14 <_printf_i+0x1ac>
 8000c7c:	4615      	mov	r5, r2
 8000c7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8000c82:	fb03 6711 	mls	r7, r3, r1, r6
 8000c86:	5dc7      	ldrb	r7, [r0, r7]
 8000c88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000c8c:	4637      	mov	r7, r6
 8000c8e:	42bb      	cmp	r3, r7
 8000c90:	460e      	mov	r6, r1
 8000c92:	d9f4      	bls.n	8000c7e <_printf_i+0x116>
 8000c94:	2b08      	cmp	r3, #8
 8000c96:	d10b      	bne.n	8000cb0 <_printf_i+0x148>
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	07de      	lsls	r6, r3, #31
 8000c9c:	d508      	bpl.n	8000cb0 <_printf_i+0x148>
 8000c9e:	6923      	ldr	r3, [r4, #16]
 8000ca0:	6861      	ldr	r1, [r4, #4]
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	bfde      	ittt	le
 8000ca6:	2330      	movle	r3, #48	; 0x30
 8000ca8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000cac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000cb0:	1b52      	subs	r2, r2, r5
 8000cb2:	6122      	str	r2, [r4, #16]
 8000cb4:	f8cd a000 	str.w	sl, [sp]
 8000cb8:	464b      	mov	r3, r9
 8000cba:	aa03      	add	r2, sp, #12
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	4640      	mov	r0, r8
 8000cc0:	f7ff fee4 	bl	8000a8c <_printf_common>
 8000cc4:	3001      	adds	r0, #1
 8000cc6:	d14a      	bne.n	8000d5e <_printf_i+0x1f6>
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	b004      	add	sp, #16
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	6023      	str	r3, [r4, #0]
 8000cda:	4833      	ldr	r0, [pc, #204]	; (8000da8 <_printf_i+0x240>)
 8000cdc:	2778      	movs	r7, #120	; 0x78
 8000cde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	6829      	ldr	r1, [r5, #0]
 8000ce6:	061f      	lsls	r7, r3, #24
 8000ce8:	f851 6b04 	ldr.w	r6, [r1], #4
 8000cec:	d402      	bmi.n	8000cf4 <_printf_i+0x18c>
 8000cee:	065f      	lsls	r7, r3, #25
 8000cf0:	bf48      	it	mi
 8000cf2:	b2b6      	uxthmi	r6, r6
 8000cf4:	07df      	lsls	r7, r3, #31
 8000cf6:	bf48      	it	mi
 8000cf8:	f043 0320 	orrmi.w	r3, r3, #32
 8000cfc:	6029      	str	r1, [r5, #0]
 8000cfe:	bf48      	it	mi
 8000d00:	6023      	strmi	r3, [r4, #0]
 8000d02:	b91e      	cbnz	r6, 8000d0c <_printf_i+0x1a4>
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	f023 0320 	bic.w	r3, r3, #32
 8000d0a:	6023      	str	r3, [r4, #0]
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	e7a7      	b.n	8000c60 <_printf_i+0xf8>
 8000d10:	4824      	ldr	r0, [pc, #144]	; (8000da4 <_printf_i+0x23c>)
 8000d12:	e7e4      	b.n	8000cde <_printf_i+0x176>
 8000d14:	4615      	mov	r5, r2
 8000d16:	e7bd      	b.n	8000c94 <_printf_i+0x12c>
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	6826      	ldr	r6, [r4, #0]
 8000d1c:	6961      	ldr	r1, [r4, #20]
 8000d1e:	1d18      	adds	r0, r3, #4
 8000d20:	6028      	str	r0, [r5, #0]
 8000d22:	0635      	lsls	r5, r6, #24
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	d501      	bpl.n	8000d2c <_printf_i+0x1c4>
 8000d28:	6019      	str	r1, [r3, #0]
 8000d2a:	e002      	b.n	8000d32 <_printf_i+0x1ca>
 8000d2c:	0670      	lsls	r0, r6, #25
 8000d2e:	d5fb      	bpl.n	8000d28 <_printf_i+0x1c0>
 8000d30:	8019      	strh	r1, [r3, #0]
 8000d32:	2300      	movs	r3, #0
 8000d34:	6123      	str	r3, [r4, #16]
 8000d36:	4615      	mov	r5, r2
 8000d38:	e7bc      	b.n	8000cb4 <_printf_i+0x14c>
 8000d3a:	682b      	ldr	r3, [r5, #0]
 8000d3c:	1d1a      	adds	r2, r3, #4
 8000d3e:	602a      	str	r2, [r5, #0]
 8000d40:	681d      	ldr	r5, [r3, #0]
 8000d42:	6862      	ldr	r2, [r4, #4]
 8000d44:	2100      	movs	r1, #0
 8000d46:	4628      	mov	r0, r5
 8000d48:	f7ff fa4a 	bl	80001e0 <memchr>
 8000d4c:	b108      	cbz	r0, 8000d52 <_printf_i+0x1ea>
 8000d4e:	1b40      	subs	r0, r0, r5
 8000d50:	6060      	str	r0, [r4, #4]
 8000d52:	6863      	ldr	r3, [r4, #4]
 8000d54:	6123      	str	r3, [r4, #16]
 8000d56:	2300      	movs	r3, #0
 8000d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d5c:	e7aa      	b.n	8000cb4 <_printf_i+0x14c>
 8000d5e:	6923      	ldr	r3, [r4, #16]
 8000d60:	462a      	mov	r2, r5
 8000d62:	4649      	mov	r1, r9
 8000d64:	4640      	mov	r0, r8
 8000d66:	47d0      	blx	sl
 8000d68:	3001      	adds	r0, #1
 8000d6a:	d0ad      	beq.n	8000cc8 <_printf_i+0x160>
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	079b      	lsls	r3, r3, #30
 8000d70:	d413      	bmi.n	8000d9a <_printf_i+0x232>
 8000d72:	68e0      	ldr	r0, [r4, #12]
 8000d74:	9b03      	ldr	r3, [sp, #12]
 8000d76:	4298      	cmp	r0, r3
 8000d78:	bfb8      	it	lt
 8000d7a:	4618      	movlt	r0, r3
 8000d7c:	e7a6      	b.n	8000ccc <_printf_i+0x164>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4632      	mov	r2, r6
 8000d82:	4649      	mov	r1, r9
 8000d84:	4640      	mov	r0, r8
 8000d86:	47d0      	blx	sl
 8000d88:	3001      	adds	r0, #1
 8000d8a:	d09d      	beq.n	8000cc8 <_printf_i+0x160>
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	68e3      	ldr	r3, [r4, #12]
 8000d90:	9903      	ldr	r1, [sp, #12]
 8000d92:	1a5b      	subs	r3, r3, r1
 8000d94:	42ab      	cmp	r3, r5
 8000d96:	dcf2      	bgt.n	8000d7e <_printf_i+0x216>
 8000d98:	e7eb      	b.n	8000d72 <_printf_i+0x20a>
 8000d9a:	2500      	movs	r5, #0
 8000d9c:	f104 0619 	add.w	r6, r4, #25
 8000da0:	e7f5      	b.n	8000d8e <_printf_i+0x226>
 8000da2:	bf00      	nop
 8000da4:	08000e95 	.word	0x08000e95
 8000da8:	08000ea6 	.word	0x08000ea6

08000dac <memmove>:
 8000dac:	4288      	cmp	r0, r1
 8000dae:	b510      	push	{r4, lr}
 8000db0:	eb01 0402 	add.w	r4, r1, r2
 8000db4:	d902      	bls.n	8000dbc <memmove+0x10>
 8000db6:	4284      	cmp	r4, r0
 8000db8:	4623      	mov	r3, r4
 8000dba:	d807      	bhi.n	8000dcc <memmove+0x20>
 8000dbc:	1e43      	subs	r3, r0, #1
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	d008      	beq.n	8000dd4 <memmove+0x28>
 8000dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000dca:	e7f8      	b.n	8000dbe <memmove+0x12>
 8000dcc:	4402      	add	r2, r0
 8000dce:	4601      	mov	r1, r0
 8000dd0:	428a      	cmp	r2, r1
 8000dd2:	d100      	bne.n	8000dd6 <memmove+0x2a>
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000dde:	e7f7      	b.n	8000dd0 <memmove+0x24>

08000de0 <memcpy>:
 8000de0:	440a      	add	r2, r1
 8000de2:	4291      	cmp	r1, r2
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d100      	bne.n	8000dec <memcpy+0xc>
 8000dea:	4770      	bx	lr
 8000dec:	b510      	push	{r4, lr}
 8000dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000df6:	4291      	cmp	r1, r2
 8000df8:	d1f9      	bne.n	8000dee <memcpy+0xe>
 8000dfa:	bd10      	pop	{r4, pc}

08000dfc <_realloc_r>:
 8000dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e00:	4680      	mov	r8, r0
 8000e02:	4614      	mov	r4, r2
 8000e04:	460e      	mov	r6, r1
 8000e06:	b921      	cbnz	r1, 8000e12 <_realloc_r+0x16>
 8000e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	f7ff bbb1 	b.w	8000574 <_malloc_r>
 8000e12:	b92a      	cbnz	r2, 8000e20 <_realloc_r+0x24>
 8000e14:	f7ff fc96 	bl	8000744 <_free_r>
 8000e18:	4625      	mov	r5, r4
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e20:	f000 f81b 	bl	8000e5a <_malloc_usable_size_r>
 8000e24:	4284      	cmp	r4, r0
 8000e26:	4607      	mov	r7, r0
 8000e28:	d802      	bhi.n	8000e30 <_realloc_r+0x34>
 8000e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000e2e:	d812      	bhi.n	8000e56 <_realloc_r+0x5a>
 8000e30:	4621      	mov	r1, r4
 8000e32:	4640      	mov	r0, r8
 8000e34:	f7ff fb9e 	bl	8000574 <_malloc_r>
 8000e38:	4605      	mov	r5, r0
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d0ed      	beq.n	8000e1a <_realloc_r+0x1e>
 8000e3e:	42bc      	cmp	r4, r7
 8000e40:	4622      	mov	r2, r4
 8000e42:	4631      	mov	r1, r6
 8000e44:	bf28      	it	cs
 8000e46:	463a      	movcs	r2, r7
 8000e48:	f7ff ffca 	bl	8000de0 <memcpy>
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	4640      	mov	r0, r8
 8000e50:	f7ff fc78 	bl	8000744 <_free_r>
 8000e54:	e7e1      	b.n	8000e1a <_realloc_r+0x1e>
 8000e56:	4635      	mov	r5, r6
 8000e58:	e7df      	b.n	8000e1a <_realloc_r+0x1e>

08000e5a <_malloc_usable_size_r>:
 8000e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e5e:	1f18      	subs	r0, r3, #4
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	bfbc      	itt	lt
 8000e64:	580b      	ldrlt	r3, [r1, r0]
 8000e66:	18c0      	addlt	r0, r0, r3
 8000e68:	4770      	bx	lr
	...

08000e6c <_init>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	bf00      	nop
 8000e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e72:	bc08      	pop	{r3}
 8000e74:	469e      	mov	lr, r3
 8000e76:	4770      	bx	lr

08000e78 <_fini>:
 8000e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7a:	bf00      	nop
 8000e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7e:	bc08      	pop	{r3}
 8000e80:	469e      	mov	lr, r3
 8000e82:	4770      	bx	lr
